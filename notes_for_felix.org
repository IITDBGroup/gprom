#+TITLE: notes for Felix

* Code Pointers for Felix - <2020-05-19 Tue>                                            :IIT:
Added: [2020-05-19 Tue 18:44]
** code pointers
- [[file:~/Documents/workspace/GProM/src/analysis_and_translate/translator_oracle.c::case PROV_INPUT_REENACT_WITH_TIMES:]]
[[- file:~/Documents/workspace/GProM/src/analysis_and_translate/translator_oracle.c::translateQueryOracle (Node *node)]]
- [[file:~/Documents/workspace/GProM/src/analysis_and_translate/analyze_oracle.c::static void analyzeUpdate(Update *f) {]]
- [[file:~/Documents/workspace/GProM/src/analysis_and_translate/analyze_oracle.c::void analyzeQueryBlockStmt(Node *stmt, List *parentFroms) {]]
- [[file:~/Documents/workspace/GProM/src/analysis_and_translate/analyze_oracle.c::analyzeOracleModel(Node *stmt) {]]
- [[file:~/Documents/workspace/GProM/src/rewriter.c::processInput(char *input)]]
- [[file:~/Documents/workspace/GProM/src/rewriter.c::rewriteQueryInternal (char *input, boolean rethrowExceptions)]]
- [[file:~/Documents/workspace/GProM/src/provenance_rewriter/prov_rewriter_main.c::rewriteProvenanceComputation(ProvenanceComputation *op) {]]
- [[file:~/Documents/workspace/GProM/src/rewriter.c::generatePlan(Node *oModel, boolean applyOptimizations)]]

** your provenance rewriter
- generate the program
- run constraint solver
- remove updates that are not needed
- call the reenactment -> query
- construct the diff query calling the reenactment
- return that
* Plan for the Summer
** TODO Implementation - First fully workable prototype [0/5]
*** TODO debugging and smaller fixes
*** TODO add support for deletes and inserts
- condition whether tuple is deleted
*** TODO integration with the full pipeline
- analyzer + translator
- calling your code
- running the query (pass to serializer)
*** TODO generating dependency check conditions for updates from MILP program simulating the updates
- merge per update constraints
- create condition on top
- filter updates based on cplex result
*** TODO take filtered updates and construct delta query
- take $Reenact(H)$ and $Reenact(H')$ and calculate $diff(Q(Reenact(H)),Q'(Reenact(H'))$
** TODO Paper [0/2]
*** TODO Proofs
- [ ] updates over VC tables behaves as updates over the incomplete databases encoded by the VC table
- [ ] constraint compilation is correct (?)
- [ ] program slicing is correct (main one)
- [ ] data slicing is correct
*** TODO write-up
- [ ] repolish introduction + abstract + conclusions
- [ ] check for new related work and polish related work
- [ ] explanations and structure
- [ ] technical section gaps
** TODO Implementation - Optimizations [0/1]
*** TODO See what need
** TODO Experiments [0/2]
*** TODO Determine what to do
**** TODO Boris: find old experiments
*** TODO Run it
* Suggested Reading

* Braindump
