#+TITLE: notes for Felix

* Code Pointers for Felix - <2020-05-19 Tue>                                            :IIT:
Added: [2020-05-19 Tue 18:44]
** code pointers
- [[file:~/Documents/workspace/GProM/src/analysis_and_translate/translator_oracle.c::case PROV_INPUT_REENACT_WITH_TIMES:]]
[[- file:~/Documents/workspace/GProM/src/analysis_and_translate/translator_oracle.c::translateQueryOracle (Node *node)]]
- [[file:~/Documents/workspace/GProM/src/analysis_and_translate/analyze_oracle.c::static void analyzeUpdate(Update *f) {]]
- [[file:~/Documents/workspace/GProM/src/analysis_and_translate/analyze_oracle.c::void analyzeQueryBlockStmt(Node *stmt, List *parentFroms) {]]
- [[file:~/Documents/workspace/GProM/src/analysis_and_translate/analyze_oracle.c::analyzeOracleModel(Node *stmt) {]]
- [[file:~/Documents/workspace/GProM/src/rewriter.c::processInput(char *input)]]
- [[file:~/Documents/workspace/GProM/src/rewriter.c::rewriteQueryInternal (char *input, boolean rethrowExceptions)]]
- [[file:~/Documents/workspace/GProM/src/provenance_rewriter/prov_rewriter_main.c::rewriteProvenanceComputation(ProvenanceComputation *op) {]]
- [[file:~/Documents/workspace/GProM/src/rewriter.c::generatePlan(Node *oModel, boolean applyOptimizations)]]

** your provenance rewriter
- generate the program
- run constraint solver
- remove updates that are not needed
- call the reenactment -> query
- construct the diff query calling the reenactment
- return that
* Plan for the Summer
** TODO Implementation - First fully workable prototype [0/5]
*** TODO debugging and smaller fixes
*** TODO add support for deletes and inserts
- condition whether tuple is deleted
*** TODO integration with the full pipeline
- analyzer + translator
- calling your code
- running the query (pass to serializer)
*** TODO generating dependency check conditions for updates from MILP program simulating the updates
- merge per update constraints
- create condition on top
- filter updates based on cplex result
*** TODO take filtered updates and construct delta query
- take $Reenact(H)$ and $Reenact(H')$ and calculate $diff(Q(Reenact(H)),Q'(Reenact(H'))$
** TODO Paper [0/2]
*** TODO Proofs
- [ ] updates over VC tables behaves as updates over the incomplete databases encoded by the VC table
- [ ] constraint compilation is correct (?)
- [ ] program slicing is correct (main one)
- [ ] data slicing is correct
*** TODO write-up
- [ ] repolish introduction + abstract + conclusions
- [ ] check for new related work and polish related work
- [ ] explanations and structure
- [ ] technical section gaps
** TODO Implementation - Optimizations [0/1]
*** TODO See what need
** TODO Experiments [0/2]
*** TODO Determine what to do
**** TODO Boris: find old experiments
*** TODO Run it
* Suggested Reading
** Incomplete Databases
- Kennedy, O., & Glavic, B. (2019). Analyzing Uncertain Tabular Data. In
  \. Boss\'{e}, & G. Rogova (Eds.), Information Quality in Information Fusion
  and Decision Making (pp. 291–320). : Springer.
- Imieli\'nski, Tomasz, & Lipski Jr, W. (1984). Incomplete information in
  relational databases. Journal of the ACM (JACM), 31(4), 761–791.

** Provenance and Reenactment
- Green, T. J., Karvounarakis, G., & Tannen, V. (2007). Provenance Semirings. In
  , PODS '07: Proceedings of the 26th Symposium on Principles of Database
  Systems (pp. 31–40). : .
- Green, T. J., & Tannen, V. (2017). The semiring framework for database
  provenance. In , Proceedings of the 36th ACM SIGMOD-SIGACT-SIGAI Symposium on
  Principles of Database Systems (pp. 93–99). : .
- Cheney, J., Chiticariu, L., & Tan, W. (2009). Provenance in databases: why,
  how, and where. Foundations and Trends in Databases, 1(4), 379–474.
- Arab, B., Gawlick, D., Krishnaswamy, V., Radhakrishnan, V., & Glavic,
  B. (2016). Reenactment for read-committed snapshot isolation (long version).
- Arab, B., Gawlick, D., Krishnaswamy, V., Radhakrishnan, V., & Glavic,
  B. (2014). Reenacting transactions to compute their provenance.
- Arab, B., Gawlick, D., Krishnaswamy, V., Radhakrishnan, V., & Glavic,
  B. (2016). Formal foundations of reenactment and transaction provenance.

** Program Slicing
- Weiser, M. (1981). Program slicing. Proceedings of the 5th international
  conference on Software engineering, (), 439–449.
- Xu, B., Qian, J., Zhang, X., Wu, Z., & Chen, L. (2005). A brief survey of
  program slicing. ACM SIGSOFT Software Engineering Notes, 30(2), 1–36.
- Korel, B., & Laski, J. (1988). Dynamic program slicing. Information Processing
  Letters, 29(3), 155–163.
* Braindump
